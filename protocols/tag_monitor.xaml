<Window x:Class="R2R.protocols.tag_monitor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:R2R.protocols"
        xmlns:Silver="clr-namespace:Panuon.UI.Silver;assembly=Panuon.UI.Silver" 
        mc:Ignorable="d"
        Title="tag_monitor"  d:DesignHeight="945" d:DesignWidth="1920"  Loaded="Window_Loaded" Background="{x:Null}" Icon="/Xwindow/Resources/立方体 立体 多面体 方块2.png">
    <Window.Resources>
        <local:TreeViewLineConverter x:Key="LineConverter"/>
        <Style TargetType="{x:Type TextBlock}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#FF97A2A4" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--根据Status列的值改变行颜色-->
        <!--<Style TargetType="DataGridRow">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Status}" Value="Completed">
                    <Setter Property="Background" Value="Green"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Status}" Value="In Progress">
                    <Setter Property="Background" Value="Yellow"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Status}" Value="Failed">
                    <Setter Property="Background" Value="Red"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>-->
        <!--采用converter判断是否为空，在WPF的DataGrid中，无法直接使用DataTrigger来判断值是否为空。-->
        <local:ValueToColorConverter x:Key="ValueToColorConverter"/>
        <Style TargetType="DataGridRow">
            <Setter Property="Foreground" Value="{Binding flagState, Converter={StaticResource ValueToColorConverter}}"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="DarkGray"/>
                </Trigger>
            </Style.Triggers>

        </Style>
        <!-- Toggle Button -->
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                            <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="true">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="Silver" Offset="0.5"/>
                                        <GradientStop Color="LightGray" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true"/>
                            <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Visibility"  TargetName="ExpandPath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- TreeViewItem -->
        <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <!--Connecting Lines-->
                            <Rectangle x:Name="HorLn" Margin="9,1,0,0" Height="1" Stroke="#DCDCDC" SnapsToDevicePixels="True"/>
                            <Rectangle x:Name="VerLn" Width="1" Stroke="#DCDCDC" Margin="0,0,1,0" Grid.RowSpan="2" SnapsToDevicePixels="true" Fill="White">

                                <Rectangle.Height>
                                    <MultiBinding Converter="{StaticResource LineConverter}">
                                        <Binding  RelativeSource="{RelativeSource AncestorType={x:Type TreeView}}" Path="ActualHeight" />
                                        <Binding  RelativeSource="{RelativeSource AncestorType={x:Type TreeView}}" Path="ActualWidth"/>
                                        <Binding  RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding  RelativeSource="{RelativeSource Self}"/>
                                        <Binding  ElementName="Expander" Path="IsChecked"/>
                                    </MultiBinding>

                                </Rectangle.Height>
                            </Rectangle>
                            <ToggleButton Margin="-1,0,0,0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            <Border x:Name="Bd" Grid.Column="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!--This trigger changes the connecting lines if the item is the last in the list-->
                            <!--<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource LineConverter}}" Value="true">
                                <Setter TargetName="VerLn" Property="Height" Value="9"/>
                                <Setter TargetName="VerLn" Property="VerticalAlignment" Value="Top"/>
                            </DataTrigger>-->


                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                            </MultiTrigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="#FFB8B8B8"/>
                                <Setter Property="Foreground" Value="White"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--滚动条空白区域-->
        <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--垂直滚动条-->
        <Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="{DynamicResource Common.Static.Background2}"/>
            <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Width" Value="60"/>
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Margin="0,-1,0,-1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="61"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="61"/>
                            </Grid.RowDefinitions>
                            <Border x:Name="scrollbarBorder" Grid.RowSpan="3" BorderBrush="{DynamicResource Common.Static.BorderBrush2}" Background="{TemplateBinding Background}" Width="61" BorderThickness="1" VerticalAlignment="Stretch" />
                            <RepeatButton Grid.Row="0" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" 
                                    Focusable="False" IsTabStop="False" SnapsToDevicePixels="True"
                                    BorderThickness="0" Padding="0">
                                <Border Width="61" Height="61" Background="{TemplateBinding Background}"
                                    BorderBrush="{Binding BorderBrush, ElementName=scrollbarBorder}"
                                    BorderThickness="{Binding BorderThickness, ElementName=scrollbarBorder}">
                                    <Path Data="M 50,0 L 0,50 100,50 z" 
                                        Fill="{DynamicResource Common.Static.Glyph}" Stretch="Fill" 
                                        Height="15" Width="20" 
                                        VerticalAlignment="Center" 
                                        HorizontalAlignment="Center"/>

                                </Border>
                            </RepeatButton>

                            <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1" ViewportSize="NaN">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource VScrollBarThumb}" Margin="2,0" MinHeight="30"
                                       BorderBrush="{DynamicResource Common.Static.BorderBrush2}" BorderThickness="1" Background="#FFFFFF"/>
                                </Track.Thumb>
                            </Track>
                            <RepeatButton Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}"
                                    Focusable="False" IsTabStop="False" SnapsToDevicePixels="True"
                                    BorderThickness="0" Padding="0">
                                <Border Width="61" Height="61" Background="{TemplateBinding Background}"
                                    BorderBrush="{Binding BorderBrush, ElementName=scrollbarBorder}"
                                    BorderThickness="{Binding BorderThickness, ElementName=scrollbarBorder}">
                                    <Path Data="M 50,50 L 0,0 100,0 z" 
                                        Fill="{DynamicResource Common.Static.Glyph}" Stretch="Fill" 
                                        Height="15" Width="20" 
                                        VerticalAlignment="Center" 
                                        HorizontalAlignment="Center"/>
                                </Border>
                            </RepeatButton>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bg" Value="{DynamicResource Common.Disabled.Background}"/>
                                <Setter Property="Visibility" TargetName="PART_Track" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </Window.Resources>
    <Grid Background="{StaticResource Color_BackGround}">
        <Border HorizontalAlignment="Left" BorderBrush="#FF121212" BorderThickness="1,1,1,1" Width="250" Margin="0,0,0,30">
            <DockPanel HorizontalAlignment="Left" LastChildFill ="true">
                <TextBlock DockPanel.Dock="Top" TextWrapping="Wrap" Text="通讯设置" Height="20" VerticalAlignment="Top" FontSize="14" Margin="10,0,0,0" HorizontalAlignment="Left" Foreground="#FF646363"/>
                <TreeView x:Name="tree1"
                          SelectedItemChanged="tree1_SelectedItemChanged" 
                          Margin="10,0,0,0" ItemsSource="{Binding }" FontSize="12" Background="{x:Null}" >
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding Devices}">
                            <TextBlock Text="{Binding ProtoName}" />
                            <HierarchicalDataTemplate.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding DeviceName}" />
                                </DataTemplate>
                            </HierarchicalDataTemplate.ItemTemplate>
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                    <!--<TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}">
                            -->
                    <!-- We have to select the item which is right-clicked on -->
                    <!--
                            <EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown"/>
                        </Style>
                    </TreeView.ItemContainerStyle>-->
                </TreeView>
            </DockPanel>
        </Border>
        <DataGrid x:Name="varDataGrid" Margin="250,0,0,30" BorderBrush="#FF646363"  CanUserAddRows="False" AutoGenerateColumns="False" 
                  HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Background="{x:Null}" >
            <DataGrid.Columns>
                <DataGridTextColumn Header="名称" Binding="{Binding name}"/>
                <DataGridTextColumn Header="类型" Binding="{Binding tagType}"/>
                <DataGridTextColumn Header="值" Binding="{Binding value}"/>
                <DataGridTextColumn Header="地址" Binding="{Binding address}"/>
                <DataGridTextColumn Header="单位" Binding="{Binding unit}"/>
                <DataGridTextColumn Header="默认值" Binding="{Binding defaultvalue}"/>
                <DataGridTextColumn Header="量程上限" Binding="{Binding limithigh}"/>
                <DataGridTextColumn Header="量程下限" Binding="{Binding limitlow}"/>
                <DataGridTextColumn Header="描述" Binding="{Binding description}"/>
            </DataGrid.Columns>
            <DataGrid.ContextMenu>
                <ContextMenu  x:Name="contextMenu">
                    <MenuItem x:Name="find" Header="查找"  Click="find_Click" />
                    <MenuItem x:Name="cancel" Header="取消"  Click="cancel_Click" />
                </ContextMenu>
            </DataGrid.ContextMenu>


        </DataGrid>
        <DockPanel LastChildFill="False" VerticalAlignment="Bottom" Height="30">
            <TextBlock x:Name="total" TextWrapping="Wrap" Text="TextBlock" Width="100" Margin="20,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </DockPanel>
        <!--<Frame x:Name="frame" Margin="250,0,0,0" NavigationUIVisibility="Hidden" BorderThickness="1,3,1,1" BorderBrush="#FF3A3838"/>-->
    </Grid>
</Window>
